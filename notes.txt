NOTES FOR RAILS TUTORIAL.

Initializing a new Rails app:
  rails new app_name --skip-test-unit
  
  --skip-test-unit tells Rails to not generate a test directory associated with
  the default Test::Unit framework; you would do this if you're using RSpec.

---------
Gemfile- this is what sets what gems (plugins) will be used on your server.
Sample Gemfile:

  source 'https://rubygems.org'
  ruby '2.0.0'
  #ruby-gemset=railstutorial_rails_4_0

  gem 'rails', '4.0.8'

  group :development, :test do
    gem 'sqlite3', '1.3.8'
    gem 'rspec-rails', '2.13.1'
  end

  group :test do
    gem 'selenium-webdriver', '2.35.1'
    gem 'capybara', '2.1.0'
  end

  gem 'sass-rails', '4.0.3'
  gem 'uglifier', '2.1.1'
  gem 'coffee-rails', '4.0.1'
  gem 'jquery-rails', '3.0.4'
  gem 'turbolinks', '1.1.1'
  gem 'jbuilder', '1.0.2'

  group :doc do
    gem 'sdoc', '0.3.20', require: false
  end

  group :production do
    gem 'pg', '0.15.1'
    gem 'rails_12factor', '0.0.2'
  end

  rspec-rails is in the :development enviroment for writing tests.
  capybara (& selenium, a dependancy) lets us write tests in natural syntax.

  pg & rails_12factor are necessary for heroku deployment. pg is the postgresql
  gem, which is the db that heroku uses. generally speaking you won't want to
  use different db's across dev and production, but for this simple app it's
  ok to use the default sqlite db for testing/dev.

---------
Installing the new gemset:
  bundle install --without production
  
  --without production skips the production group.

  run "bundle update" if you get errors, it forces version compatibity.

---------
.gitignore setup
since we're going to commit this to a public repo, we need to set up a 
.gitignore that guards against committing anything we don't want to.

  sample .gitignore:

  # Ignore bundler config.
  /.bundle

  # Ignore the default SQLite database.
  /db/*.sqlite3
  /db/*.sqlite3-journal

  # Ignore all logfiles and tempfiles.
  /log/*.log
  /tmp

  # Ignore other unneeded files.
  # .secret is important to ignore!
  database.yml
  doc/
  *.swp
  *~
  .project
  .DS_Store
  .idea
  .secret

  The most important part is .secret- this makes sure we don't share our
  secret key in the repo.

---------
Dynamically Generating A Secret Token.
Because the sample application is shared as a public repository, it’s 
important to update the so-called secret token used by Rails to protect 
session variables so that it is dynamically generated rather than hard-coded 
Be sure to use the augmented .gitignore file from above so that the .secret 
key isn’t exposed in your repository.

**config/initializers/secret_token.rb
  
  require 'securerandom'

  def secure_token
    token_file = Rails.root.join('.secret')
    if File.exist?(token_file)
      # Use the existing token.
      File.read(token_file).chomp
    else
      # Generate a new token and store it in token_file.
      token = SecureRandom.hex(64)
      File.write(token_file, token)
      token
    end
  end

  SampleApp::Application.config.secret_key_base = secure_token


---------
Configure Rails to Use RSpec (instead of Test::Unit)
  
  rails generate rspec:install

  if install complains about no JS exec, install node.js.

---------
Initialize the Git repo.

  git init
  git add.
  git commit -m "Initial commit"

  Update the README while you're at it- switch it over to markdown.

  git mv README.rdoc README.md
  git commit -am "Improve the README"

---------
Adding the App to Github.
  
  Make a new repo at github.com.

  git remote add origin https://github.com/<username>/sample_app.git
  git push -u origin master

---------
Deploying the barebones app to Heroku.

  heroku create
  git push heroku master
  heroku run rake db:migrate

---------
---------
---------

GENERATING AND CUSTOMIZING STATIC PAGES

Create a new branch on Git.

  git checkout -b static-pages

---------
Generating a Static Pages controller.
  We'll set up a controller for our static pages, with actions for Home and
  Help pages.

  rails generate controller StaticPages home help --no-test-framework

  We pass the controller name in CamelCase, and Rails will generate the
  controller in snake case, eg static_pages_controller.rb
  We're going to write our own tests, so that's why we remove the stock ones.

  This generator will automatically update the config/routes.rb file, adding
  routes for the home and help actions.

---------
Routes.rb And Action Mapping

Our current routes.rb file:
  SampleApp::Application.routes.draw do
    get "static_pages/home"
    get "static_pages/help"
  end

  get "static_pages/home" maps requests for the URL /static_pages/home to the
  home action in the StaticPages controller. By using get, we set up the route
  to respond to the Get REST action. So, when we generate a home action inside
  the StaticPages controller we automatically get a page at the address 
  /static_pages/home.

---------
The Generated StaticPages Controller

app/controllers/static_pages_controller.rb:

  class StaticPagesController < ApplicationController

    def home
    end

    def help
    end
  end

  The StaticPagesController class inherits from ApplicationController.
  
  The generator gave us the home and help methods. In Rails, when someone
  visits /static_pages/home, Rails looks in the StaticPages controller and
  executes the home method, and then renders the view corresponding to the
  action (in this case, the default generated view)

---------
The Generated Views

The home page (app/views/static_pages/home.html.erb):

  <h1>StaticPages#home</h1>
  <p>Find me in app/views/static_pages/home.html.erb</p>

  As you can see, it's just filler at the moment.

---------
Let's Commit to Git.

  git add .
  git commit -m "Add a StaticPages controller"

---------
---------
---------  

WRITING OUR FIRST TESTS

We'll start with Integration Tests, which simulate the action of a user
interacting with our app via a web browser. We use Capybara for writing the
test definitions, because it's got a english-like syntax. Cucumber is another
alternative. Let's begin:

  rails generate integration_test static_pages

  This creates the static_pages_spec.rb file in the spec/requests directory.

---------
The Generated spec/requests/static_pages_spec.rb

  The generated file is not pretty, so we'll update it:

  require 'spec_helper'

  describe "Static pages" do

    describe "Home page" do
      it "should have the content 'Sample App'" do
        visit '/static_pages/home'
        expect(page).to have_content('Sample App')
      end
    end
  
  end

  Look at the Home page describe block.
  First, describe what you're testing, this can be any string but it's best
  to just use the direct action title. Then, tell it what it should have when 
  it performs a specific action.

---------
Adding the Capybara DSL to the RSpec helper file.
(This won't be necessary once we look into the newer technique of feature 
specs)

  spec/spec_helper.rb: add this line to the RSpec.configure do |config| block:

  config.include Capybara::DSL

---------
Running the First Test
  
  bundle exec rspec spec/requests/static_pages_spec.rb

  Of course, this first test will fail as we haven't set the Sample page 
  content. That's what you do in TDD: write a failing test first, then get it
  to pass.

---------
Getting It To Pass
  Editing the home.html.erb file:

  <h1>Sample App</h1>
  <p>
    This is the home page for the
    <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
    sample application.
  </p>

  Now rerun the test and it should pass:
  bundle exec rspec spec/requests/static_pages_spec.rb
  (You can omit bundle exec if RVM is working right.)

---------
Adding Another Test to The Spec:

  describe "Help page" do

    it "should have the content 'Help'" do
      visit '/static_pages/help'
      expect(page).to have_content('Help')
    end
  end

  It's just like the home page test.

  Run the rspec again, and it should fail.

---------
Fixing the Failing Help Page Test:
  Just update the view (help.html.erb) lke we did with the home page.

  <h1>Help</h1>
  <p>
    Get help on the Ruby on Rails Tutorial at the
    <a href="http://railstutorial.org/help">Rails Tutorial help page</a>.
    To get help on this sample app, see the
    <a href="http://railstutorial.org/book">Rails Tutorial book</a>.
  </p>

  Run the test again and it should pass.

---------
---------
---------
Adding A New Page
  First we'll write a test for the to-be-created page.

  describe "About page" do
    it "should have the content 'About Us'" do
      visit '/static_pages/about'
      expect(page).to have_content('About Us')
    end
  end

  Running the test will give us an error:
  "No route matches [GET] 'static_pages/about'"
  This is a clue that we need to add the /static_pages/about route to 
  routes.rb.

---------
Adding an About route to routes.rb.
  Add this to routes.rb:
  get "static_pages/about"

  Run the test again and we'll get a new error:
  "The action 'about' could not be found for StaticPagesController"

  So let's add it to static_pages_controller.rb:

  def about
  end

  Running the test again gives a new error:
  Missing template static_pages/about
  This means we're missing the correct about view file, about.html.erb

  Set up the about.html.erb:

  <h1>About Us</h1>
  <p>
    The <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
    is a project to make a book and screencasts to teach web development
    with <a href="http://rubyonrails.org/">Ruby on Rails</a>. This
    is the sample application for the tutorial.
  </p>

  Run the test one last time and it should be all green.

---------
---------
---------

Testing A Title Change
  We're going to set up the pages to have dynamic titles. First, we'll write
  tests for the titles, then add the titles, and finally use a layout file
  to refactor the resulting pages and eliminate duplication (D.R.Y.)

  'rails new' already generated a stock layout file. Let's rename it before
  moving on:

  mv app/views/layouts/application.html.erb foobar.temp

  We're going to config the title so it displays like the following:
  "Ruby on Rails Tutorial Sample App | Home", where the title is variable.

  Add the tests first:

  it "should have the right title" do
    visit '/static_pages/home'
    expect(page).to have_title("Ruby on Rails Tutorial Sample App | Home")
  end

  (The syntax is the same for the other pages, just change the visit and
  expected page title.)

  Run the rspec and it'll fail. Time to fix that.

---------
Passing The Title Tests

  Change the HTML in the views to get the titles right. Example:

  <!DOCTYPE html>
  <html>
    <head>
      <title>Ruby on Rails Tutorial Sample App | About Us</title>
    </head>
    <body>
      <h1>About Us</h1>
      <p>
        The <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
        is a project to make a book and screencasts to teach web development
        with <a href="http://rubyonrails.org/">Ruby on Rails</a>. This
        is the sample application for the tutorial.
      </p>
    </body>
  </html>

  Run the rspec again and it should pass.

---------
---------
---------
Embedded Ruby
  We can use embedded ruby in our views to avoid duplication. (DRY principle)

  Change home.html.erb to this:

  <% provide(:title, 'Home') %>
  <!DOCTYPE html>
  <html>
    <head>
      <title>Ruby on Rails Tutorial Sample App | <%= yield(:title) %></title>
    </head>
    <body>
      <h1>Sample App</h1>
      <p>
        This is the home page for the
        <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
        sample application.
      </p>
    </body>
  </html>

  Some notes: <% %> sets a variable or runs the code in the block.
              <%= %> inserts the return of the block into the view.

  Running the test again should still pass. 
  Go ahead and refactor the about and help pages to include the new provide
  blocks. Run the test to make sure they still pass.

---------
Eliminating Duplication With Layouts
  We can factor out the repitition by using the application.html.erb layout.
  Let's bring it back into play:
  
  mv foobar.temp app/views/layouts/application.html.erb

  Now update the file:

  <!DOCTYPE html>
  <html>
  <head>
    <title>Ruby on Rails Tutorial Sample App | <%= yield(:title) %></title>
    <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-
    track" => true %>
    <%= javascript_include_tag "application", "data-turbolinks-track" => true 
    %>
    <%= csrf_meta_tags %>
  </head>
  <body>

  <%= yield %>

  </body>
  </html>

  Note: the <%= yield => in the body is responsible for inserting the contents
  of each page into the layout, ie if the route is /static_pages/home, it will
  yield whatever is in home.html.erb.

  Now we need to clean up the views we edited earlier. Here's home.html.erb:

  <% provide(:title, 'Home') %>
  <h1>Sample App</h1>
  <p>
    This is the home page for the
    <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
    sample application.
  </p>

  Notice how most of the HTML structue is gone? That's because the application
  layout file is now providing it. Go ahead and change the about & help pages
  as well.

  Run the test again and it should pass. Congrats, title code is refactored.

---------
---------
---------

Conclusion:











---------
Undoing A Mistake

  Undoing code generation- these two commands cancel each other out.
  rails generate controller FooBars baz quux
  rails destroy controller FooBars

  Models can be handled the same way:
  rails destroy model Foo

  Undoing db migration:
  rake db:rollback  <- back up one migration
  rake db:migrate VERSION=0 <- goes all the way back