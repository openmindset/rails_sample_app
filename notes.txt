NOTES FOR RAILS TUTORIAL.

Initializing a new Rails app:
  rails new app_name --skip-test-unit
  
  --skip-test-unit tells Rails to not generate a test directory associated with
  the default Test::Unit framework; you would do this if you're using RSpec.

---------
Gemfile- this is what sets what gems (plugins) will be used on your server.
Sample Gemfile:

  source 'https://rubygems.org'
  ruby '2.0.0'
  #ruby-gemset=railstutorial_rails_4_0

  gem 'rails', '4.0.8'

  group :development, :test do
    gem 'sqlite3', '1.3.8'
    gem 'rspec-rails', '2.13.1'
  end

  group :test do
    gem 'selenium-webdriver', '2.35.1'
    gem 'capybara', '2.1.0'
  end

  gem 'sass-rails', '4.0.3'
  gem 'uglifier', '2.1.1'
  gem 'coffee-rails', '4.0.1'
  gem 'jquery-rails', '3.0.4'
  gem 'turbolinks', '1.1.1'
  gem 'jbuilder', '1.0.2'

  group :doc do
    gem 'sdoc', '0.3.20', require: false
  end

  group :production do
    gem 'pg', '0.15.1'
    gem 'rails_12factor', '0.0.2'
  end

  rspec-rails is in the :development enviroment for writing tests.
  capybara (& selenium, a dependancy) lets us write tests in natural syntax.

  pg & rails_12factor are necessary for heroku deployment. pg is the postgresql
  gem, which is the db that heroku uses. generally speaking you won't want to
  use different db's across dev and production, but for this simple app it's
  ok to use the default sqlite db for testing/dev.

---------
Installing the new gemset:
  bundle install --without production
  
  --without production skips the production group.

  run "bundle update" if you get errors, it forces version compatibity.

---------
.gitignore setup
since we're going to commit this to a public repo, we need to set up a 
.gitignore that guards against committing anything we don't want to.

  sample .gitignore:

  # Ignore bundler config.
  /.bundle

  # Ignore the default SQLite database.
  /db/*.sqlite3
  /db/*.sqlite3-journal

  # Ignore all logfiles and tempfiles.
  /log/*.log
  /tmp

  # Ignore other unneeded files.
  # .secret is important to ignore!
  database.yml
  doc/
  *.swp
  *~
  .project
  .DS_Store
  .idea
  .secret

  The most important part is .secret- this makes sure we don't share our
  secret key in the repo.

---------
Dynamically Generating A Secret Token.
Because the sample application is shared as a public repository, it’s 
important to update the so-called secret token used by Rails to protect 
session variables so that it is dynamically generated rather than hard-coded 
Be sure to use the augmented .gitignore file from above so that the .secret 
key isn’t exposed in your repository.

**config/initializers/secret_token.rb
  
  require 'securerandom'

  def secure_token
    token_file = Rails.root.join('.secret')
    if File.exist?(token_file)
      # Use the existing token.
      File.read(token_file).chomp
    else
      # Generate a new token and store it in token_file.
      token = SecureRandom.hex(64)
      File.write(token_file, token)
      token
    end
  end

  SampleApp::Application.config.secret_key_base = secure_token


---------
Configure Rails to Use RSpec (instead of Test::Unit)
  
  rails generate rspec:install

  if install complains about no JS exec, install node.js.

---------
Initialize the Git repo.

  git init
  git add.
  git commit -m "Initial commit"

  Update the README while you're at it- switch it over to markdown.

  git mv README.rdoc README.md
  git commit -am "Improve the README"

---------
Adding the App to Github.
  
  Make a new repo at github.com.

  git remote add origin https://github.com/<username>/sample_app.git
  git push -u origin master

---------
Deploying the barebones app to Heroku.

  heroku create
  git push heroku master
  heroku run rake db:migrate

---------
---------
---------

Generating And Customizing Static Pages

Create a new branch on Git.

  git checkout -b static-pages

---------
Generating a Static Pages controller.
  We'll set up a controller for our static pages, with actions for Home and
  Help pages.

  rails generate controller StaticPages home help --no-test-framework

  We pass the controller name in CamelCase, and Rails will generate the
  controller in snake case, eg static_pages_controller.rb
  We're going to write our own tests, so that's why we remove the stock ones.

  This generator will automatically update the config/routes.rb file, adding
  routes for the home and help actions.

---------
Routes.rb And Action Mapping

Our current routes.rb file:
  SampleApp::Application.routes.draw do
    get "static_pages/home"
    get "static_pages/help"
  end

  get "static_pages/home" maps requests for the URL /static_pages/home to the
  home action in the StaticPages controller. By using get, we set up the route
  to respond to the Get REST action. So, when we generate a home action inside
  the StaticPages controller we automatically get a page at the address 
  /static_pages/home.

---------
Undoing A Mistake

  Undoing code generation- these two commands cancel each other out.
  rails generate controller FooBars baz quux
  rails destroy controller FooBars

  Models can be handled the same way:
  rails destroy model Foo

  Undoing db migration:
  rake db:rollback  <- back up one migration
  rake db:migrate VERSION=0 <- goes all the way back